author,list_of_contents,publish_date,summary,tags,title,url
Bartosz Zaczyński,"Defining the Absolute Value,Implementing the Absolute Value Function in Python,Using the Built-in abs() Function With Numbers,	Integers and Floating-Point Numbers,	Complex Numbers,	Fractions and Decimals,Calling abs() on Other Python Objects,	NumPy Arrays and pandas Series,	Your Very Own Data Types,Conclusion,Frequently Asked Questions","by , Jun 04, 2025
    
    
      ","Learn how to calculate the Python absolute value with abs(), implement the math behind it from scratch, and customize it in your own classes.","basics,python",How to Find an Absolute Value in Python,https://realpython.com/python-absolute-value/
Dorothy Phoenix,"Introducing the break Statement,Breaking Out of a Loop With a Set Number of Iterations,Using the Python break Statement to Process User Input,Breaking Out of Nested Loops,Using the continue Keyword Instead of break,Using break Together With an else Clause,Conclusion,Frequently Asked Questions","by , Apr 16, 2025
    
    
      ","In this tutorial, you'll explore various ways to use Python's break statement to exit a loop early. Through practical examples, such as a student test score analysis tool and a number-guessing game, you'll see how the break statement can improve the efficiency and effectiveness of your code.","basics,python",How to Exit Loops Early With the Python Break Keyword,https://realpython.com/python-break/
Amanda Adoyi,"Getting Started With Nested Loops in Python,Exploring Practical Examples of Nested Loops,	Printing Patterns With Nested Loops,	Generating a Multiplication Table,	Summing Elements in Multidimensional Lists,	Creating Pairwise Combinations,	Working With while Loops in Nested Structures,Avoiding Common Nested Loop Pitfalls,	Handling Variable Scoping Issues,	Addressing Poor Readability,	Dealing With Performance Bottlenecks,Optimizing Nested Loops in Python,	Using break and continue,	Replacing Nested Loops With List Comprehension,Conclusion,Frequently Asked Questions","by , May 21, 2025
    
    
      ",Learn how to use nested loops in Python to iterate over multiple sequences and perform repeated actions efficiently in your programs.,"basics,python",Nested Loops in Python,https://realpython.com/nested-loops-python/
Rohit Goswami,"Setting the Stage for Scripting,	Using the Shebang Line,	Organizing the Import Statements,	Creating the Initial Script,Adding Structure With Constants and Entry Points,Managing Dependencies With PEP 723,Handling Command-Line Arguments,Choosing Appropriate Data Structures for Scripts,	Using enum for Constants and Options,	Using dataclass for Flexible Records,	Considering Other Structures,Improving Script Feedback,	Adding Internal Checks With assert,	Enhancing Output With Rich,Following Python Script Structure Recommendations,Putting It All Together,Conclusion,Frequently Asked Questions","by , Jun 02, 2025
    
    
      ","Structure your Python script like a pro. This guide shows you how to organize your code, manage dependencies with PEP 723, and handle command-line arguments.","basics,python",How Can You Structure Your Python Script?,https://realpython.com/python-script-structure/
Michael Neary,"Open Python’s IDLE for the First Time,Get to Know the Python IDLE Shell,	Understanding the Interactive Interpreter,	Interacting With the IDLE Shell,	Interrupting Processes,Work With Python Files in IDLE,	Opening a File,	Saving a File,	Editing a File,	Showing Line Numbers,	Executing a File,Improve Your IDLE Workflow,	Automatic Indentation,	Code Completion and Call Tips,	Code Context,Debug in IDLE,	Interpreter DEBUG Mode,	Breakpoints,Handle Errors and Exceptions,	Get Notifications Before Running Code,	Jump to the Error Source,	Use the Stack Viewer,Customize Settings in Python IDLE,	Fonts,	Highlights,	Keys,	Windows,	Shell and Editor,	Extensions,Conclusion,Frequently Asked Questions","by , Apr 23, 2025
    
    
      ","In this tutorial, you'll learn how to use the development environment included with your Python installation. Python IDLE is a small program that packs a big punch! You'll learn how to use Python IDLE to interact with Python directly, work with Python files, and improve your development workflow.","basics,editors",Getting Started With Python IDLE,https://realpython.com/python-idle/
Leodanis Pozo Ramos,"Getting to Know Functions in Python,Exploring Some Benefits of Functions,	Abstraction,	Encapsulation,	Modularity,	Reusability,	Maintainability,	Testability,Defining Functions in Python,Calling Functions in Python,	Positional Arguments,	Keyword Arguments,Returning From Functions,	Producing Side Effects,	Returning Values,	Exiting Functions Early,	Returning Boolean Values,	Returning Generator Iterators,	Creating Closures,Defining and Calling Functions: Advanced Features,	Default Argument Values,	Variable Number of Positional Arguments: *args,	Variable Number of Keyword Arguments: **kwargs,	Positional and Keywords Combined: *args and **kwargs,	Positional-Only Arguments,	Keyword-Only Arguments,Using Other Advanced Ways to Call Functions,	Unpacking an Iterable Into Positional Arguments,	Unpacking Keyword Arguments,Exploring Optional Features of Functions,	Docstrings,	Annotations,Taking a Quick Look at Asynchronous Functions,Conclusion,Frequently Asked Questions","by , Jun 11, 2025
    
    
      ","Learn how to define your own Python function, pass data into it, and return results to write clean, reusable code in your programs.","basics,python",Defining Your Own Python Function,https://realpython.com/defining-your-own-python-function/
Leodanis Pozo Ramos,"Getting Started With Python’s set Data Type,Building Sets in Python,	Creating Sets Through Literals,	Using the set() Constructor,	Using Set Comprehensions,Performing Common Set Operations,	Union,	Intersection,	Difference,	Symmetric Difference,Using Augmented Set Operations,	Augmented Union,	Augmented Intersection,	Augmented Difference,	Augmented Symmetric Difference,Comparing Sets,	Subsets,	Proper Subsets,	Supersets,	Proper Supersets,	Disjoint Sets,Using Other Set Methods,	Adding an Element With .add(),	Removing an Existing Element With .remove(),	Deleting an Existing or Missing Element With .discard(),	Removing and Returning an Element With .pop(),	Removing All Elements With .clear(),	Creating Shallow Copies of Sets With .copy(),Traversing Sets,	Accessing and Modifying Elements in a Loop,	Processing and Removing Elements in a Loop,	Iterating Through a Sorted Set,Exploring Other Set Capabilities,	Finding the Number of Elements With len(),	Running Membership Tests on Sets,Conclusion,Frequently Asked Questions","by , May 05, 2025
    
    
      ","Learn how to work effectively with Python sets. You’ll define set objects, explore supported operations, and understand when sets are the right choice for your code.","basics,python",Sets in Python,https://realpython.com/python-sets/
Leodanis Pozo Ramos,"Getting Started With Membership Tests in Python,	Python’s in Operator,	Python’s not in Operator,Using in and not in With Different Python Types,	Lists, Tuples, and Ranges,	Strings,	Generators,	Dictionaries and Sets,Putting Python’s in and not in Operators Into Action,	Replacing Chained or Operators,	Writing Efficient Membership Tests,Using operator.contains() for Membership Tests,Supporting Membership Tests in User-Defined Classes,Conclusion,Frequently Asked Questions","by , Jan 26, 2025
    
    
      ","In this tutorial, you'll learn how to check if a given value is present or absent in a collection of values using Python's in and not in operators, respectively. This type of check is known as membership test in Python.","basics,best-practices,python","Python's ""in"" and ""not in"" Operators: Check for Membership",https://realpython.com/python-in-operator/
Leodanis Pozo Ramos,"Getting Started With Python Lists and Tuples,	Creating Lists in Python,	Creating Tuples in Python,Exploring Core Features of Lists and Tuples,	Lists and Tuples Are Ordered Sequences,	Lists and Tuples Can Contain Arbitrary Objects,	Lists and Tuples Can Be Indexed and Sliced,	Lists and Tuples Can Be Nested,	Lists Are Mutable, Tuples Are Immutable,	Lists Have Mutator Methods, Tuples Don’t,Using Operators and Built-in Functions With Lists and Tuples,Packing and Unpacking Lists and Tuples,Using Lists vs Tuples in Python,Conclusion,Frequently Asked Questions","by , Jan 26, 2025
    
    
      ","In this tutorial, you'll learn the key characteristics of lists and tuples in Python, as well as how to define and manipulate them. When you're finished, you'll have a good feel for when to use a tuple vs a list in a Python program.","basics,python",Lists vs Tuples in Python,https://realpython.com/python-lists-tuples/
Bartosz Zaczyński,"Recall the Fundamentals of Parallel Processing,	What’s Parallel Processing?,	How Do CPU-Bound and I/O-Bound Tasks Differ?,	Why Do Modern Computers Favor Parallelism?,	How Can You Harness the Power of Multiple CPU Cores?,Compare Multithreading in Python and Other Languages,	Java Threads Solve CPU-Bound and I/O-Bound Problems,	Python Threads Only Solve I/O-Bound Problems,	Python’s GIL Prevents Threads From Running in Parallel,	The GIL Ensures Thread Safety of the Python Internals,Use Process-Based Parallelism Instead of Multithreading,	multiprocessing: Low-Level Control Over Processes,	concurrent.futures: High-Level Interface for Running Concurrent Tasks,Make Python Threads Run in Parallel,	Use an Alternative Runtime Environment for Python,	Install a GIL-Immune Library Like NumPy,	Write a C Extension Module With the GIL Released,	Have Cython Generate a C Extension Module for You,	Call a Foreign C Function Using ctypes,Try It Out: Parallel Image Processing in Python,	Make a Graphical User Interface Using Tkinter,	Define a Command-Line Interface With argparse,	Display a Scaled-Down Preview of the Loaded Image,	Interact With Your Application Through Mouse Events,	Write a C Function to Calculate the Pixel Formula,	Process Color Channels in Separate Threads of Execution,	Build a Lookup Table for Common Pixel Values,	Share Memory Between Python and C Through Pointers,Conclusion",by ,"In this tutorial, you'll take a deep dive into parallel processing in Python. You'll learn about a few traditional and several novel ways of sidestepping the global interpreter lock (GIL) to achieve genuine shared-memory parallelism of your CPU-bound tasks.","advanced,python",Bypassing the GIL for Parallel Processing in Python,https://realpython.com/python-parallel-processing/
Charles de Villiers,"In Short: __init__.py Declares a Folder as a Regular Python Package,What Happens When I Add Code to __init__.py?,What Happens if I Don’t Add an __init__.py File?,What Kind of Code Should I Put in __init__.py?,When Does __init__.py Get Executed?,How Is __init__.py Used in a Practical Example?,Can I Use __init__.py to Control What’s Exported From a Package?,Is a Top-Level __init__.py Different From One in a Subpackage?,Conclusion,Frequently Asked Questions",by ,"Learn to declare packages with Python's __init__.py, set package variables, simplify imports, and understand what happens if this module is missing.","basics,python",What Is Python's __init__.py For?,https://realpython.com/preview/python-init-py/
Philipp Acsany,"Using Python’s enumerate(),Practicing With Python enumerate(),	Performing an Action Based on the Loop Step,	Getting Every Second Item of an Iterable,	Referencing Line Numbers in a File,Understanding Python enumerate(),Exploring Alternatives to enumerate(),	Using Slicing Instead of enumerate(),	Using zip() for Multi-Sequence Iteration,	Using itertools for Advanced Iteration Patterns,Conclusion,Frequently Asked Questions","by , Jun 23, 2025
    
    
      ",Learn how to simplify your loops with Python’s enumerate(). This tutorial shows you how to pair items with their index cleanly and effectively using real-world examples.,"basics,best-practices",Python enumerate(): Simplify Loops That Need Counters,https://realpython.com/python-enumerate/
Martin Breuss,"Compare Instance Methods vs Class Methods vs Static Methods,Gain Insight Through an Abstract Example,Apply Your Knowledge With a Practical Example,	When to Use Instance Methods,	When to Use Class Methods,	When to Use Static Methods,Conclusion,Frequently Asked Questions","by , Mar 17, 2025
    
    
      ","In this tutorial, you'll compare Python's instance methods, class methods, and static methods. You'll gain an understanding of when and how to use each method type to write clear and maintainable object-oriented code.","intermediate,python","Python's Instance, Class, and Static Methods Demystified",https://realpython.com/instance-class-and-static-methods-demystified/
Charles de Villiers,"Installing Textual,	Checking the Textual Installation,	Getting to Know Textual,Creating Your First Textual App,Exploring Textual Widgets,	Static and Label Widgets,	Button and Input Widgets,	Advanced Widgets,Styling Your Application With Textual’s CSS,Using the textual-dev Development Tools,Laying Out Textual UIs With Containers,	Vertical Containers,	Horizontal Containers,	Docked Widgets,	Nested Containers and Docked Widgets,	Grid Container,Handling Events and Actions in Textual Apps,Conclusion,Frequently Asked Questions","by , Mar 12, 2025
    
    
      ","Textual is a Python library for building text-based user interfaces (TUIs) that support rich text, advanced layouts, and event-driven interactivity in the terminal. This tutorial showcases some of the ways you can design an appealing and engaging UI using Textual.","intermediate,front-end,tools",Python Textual: Build Beautiful UIs in the Terminal,https://realpython.com/python-textual/
Harrison Hoffman,"Install LangGraph,Create Test Cases,Work With State Graphs,	LangChain Chains and Their Limitations,	Build Your First State Graph,Work With Conditional Edges,	Create a Conditional Edge,	Use Conditional Edges for Cycles,Develop Graph Agents,	Structure Agents as Graphs,	Test Your Graph Agent,Conclusion,Frequently Asked Questions","by , Mar 19, 2025
    
    
      ","LangGraph is a versatile Python library designed for stateful, cyclic, and multi-actor Large Language Model (LLM) applications. This tutorial will give you an overview of LangGraph fundamentals through hands-on examples, and the tools needed to build your own LLM workflows and agents in LangGraph.","intermediate,data-science",LangGraph: Build Stateful AI Agents in Python,https://realpython.com/langgraph-python/
Leodanis Pozo Ramos,"Defining Code Quality,	Low-Quality Code,	High-Quality Code,	The Importance of Code Quality,Exploring Code Quality in Python With Examples,	Functionality,	Readability,	Documentation,	Compliance,	Reusability,	Maintainability,	Robustness,	Testability,	Efficiency,	Scalability,	Security,Managing Trade-Offs Between Code Quality Characteristics,Applying Best Practices for High-Quality Code in Python,	Style Guides,	Code Reviews,	AI Assistants,	Documentation Tools,	Code Linters,	Static Type Checkers,	Code Formatters,	Code Testing,	Code Profilers,	Vulnerability Checkers,Deciding When to Check the Quality of Your Code,Conclusion,Frequently Asked Questions","by , Mar 24, 2025
    
    
      ","In this tutorial, you'll learn about code quality and the key factors that make Python code high-quality. You'll explore effective strategies, powerful tools, and best practices to elevate your code to the next level.","intermediate,best-practices,python,tools",Python Code Quality: Best Practices and Tools,https://realpython.com/python-code-quality/
Charles de Villiers,"NumPy: Numerical Python,	Introducing NumPy,	Creating and Using NumPy Arrays,	Creating Arrays in Other Ways,NumPy’s max(): The Maximum Element in an Array,	Using max(),	Handling Missing Values in np.max(),	Exploring Related Maximum Functions,NumPy’s maximum(): Maximum Elements Across Arrays,	Using np.maximum(),	Handling Missing Values in np.maximum(),Advanced Usage,	Reusing Memory,	Filtering Arrays,	Comparing Differently Shaped Arrays With Broadcasting,	Following Broadcasting Rules,Conclusion,Frequently Asked Questions","by , Jan 18, 2025
    
    
      ","In this introduction to NumPy, you'll learn how to find extreme values using the max() and maximum() functions. This includes finding the maximum element in an array or along a given axis of an array, as well as comparing two arrays to find the larger element in each index position.","basics,data-science,numpy",NumPy's max() and maximum(): Find Extreme Values in Arrays,https://realpython.com/numpy-max-maximum/
Ian Eyre,"Getting Started With DuckDB,	Creating a Database From a Data Source,	Correcting Your Data Import Errors,Querying the Database,	Querying Tables,	Querying Relations,Using Concurrency,	Performing Concurrent Reads,	Performing Concurrent Writes,Integrating DuckDB Within Your Python Environment,	Creating Python Functions for DuckDB to Use,	Using Polars and pandas With DuckDB,Next Steps,Conclusion,Frequently Asked Questions","by , Mar 26, 2025
    
    
      ","In this showcase tutorial, you'll be introduced to a library that allows you to use a database in your code. DuckDB provides an efficient relational database that supports many features you may already be familiar with from more traditional relational database systems.","intermediate,databases,data-science,python",Introducing DuckDB,https://realpython.com/python-duckdb/
Bartosz Zaczyński,"Understanding Python’s bytearray Type,Creating bytearray Objects in Python,	The bytearray() Constructor,	The .fromhex() Class Method,Comparing bytearray to bytes Objects,	Public Methods,	Supported Operators,	Expressions With bytearray and bytes,Manipulating bytearray Objects in Python,	String-Like Operations,	Immutable Sequence Operations,	Mutable Sequence Operations,	Byte-Specific Operations,Conclusion,Frequently Asked Questions","by , Mar 31, 2025
    
    
      ","In this tutorial, you'll learn about Python's bytearray, a mutable sequence of bytes for efficient binary data manipulation. You'll explore how it differs from bytes, how to create and modify bytearray objects, and when to use them in tasks like processing binary files and network protocols.","intermediate,python",Python's Bytearray: A Mutable Sequence of Bytes,https://realpython.com/python-bytearray/
Bartosz Zaczyński,"Printing in a Nutshell,	Producing Blank Lines,	Dealing With Newlines,	Passing Arguments,	Separating Multiple Arguments,	Preventing Line Breaks,	Printing to a File,	Buffering print() Calls,	Printing Custom Data Types,Understanding Python print(),	From Statement to Function,	Benefits of Functions,Printing With Style,	Pretty-Printing Nested Data Structures,	Adding Colors With ANSI Escape Sequences,	Building Console User Interfaces,	Living It Up With Cool Animations,	Making Sounds With print(),Mocking Python print() in Unit Tests,	Using Dependency Injection,	Applying Monkey Patching,Debugging Approaches in Python,	Tracing,	Logging,	Debugging,Printing in a Thread-Safe Manner,	Understanding Thread Safety,	Demonstrating Unsafe Printing,	Fixing the Problem,	Making print() Thread-Safe,	Relying on Logging,Exploring Printing Counterparts,	Collecting User Input,	Handling Input Securely,	Adding Readline Capabilities,	Evaluating Third-Party Libraries,Conclusion,Frequently Asked Questions","by , Jun 25, 2025
    
    
      ","Learn how Python's print() function works, avoid common pitfalls, and explore powerful alternatives and hidden features that can improve your code.","basics,python",Your Guide to the Python print() Function,https://realpython.com/python-print/
Ian Eyre,"How to Get Started in a marimo Notebook,	Adding Code and Markdown Content,	Taking a First Look at Reactivity,How marimo’s Reactivity Supports Reproducibility,	Adding Code in an Unexpected Order,	Working Out the Cell Running Order,	Exploring Further Change Reactions,How marimo’s User Interface Elements Provide Interactivity,	Creating a Basic Dashboard,	Adding Interactivity,	Adding the UI Elements,	Displaying the UI Elements in Your Notebook,	Bringing the UI Elements to Life,	Testing Your Skills,How marimo Makes Notebooks Distributable,	Managing the Notebook’s Environment With Sandboxing,	Practicing Sandboxing,	Exporting a Notebook,	Running a Notebook as a Script,	Adding Some Explanatory Markdown,	Creating the Script,Why Linear Notebooks Don’t Quite Cut It Anymore,	Redefinitions,	Cell Running Order,	Expired Data Retention,Conclusion,Frequently Asked Questions","by , May 26, 2025
    
    
      ","Discover how marimo notebook simplifies coding with reactive updates, UI elements, and sandboxing for safe, sharable notebooks.","intermediate,data-science,editors,python,tools","marimo: A Reactive, Reproducible Notebook",https://realpython.com/marimo-notebook/
Abdelhadi Dyouri,"Installing Loguru,	Verifying the Installation,	Understanding Basic Setup Considerations,Learning the Fundamentals of Logging With Loguru,	Getting Started With Zero Configuration,	Understanding Log Levels,	Customizing Logs,	Adding Context to Logs,	Logging to Files Using Loguru,Error Handling and Debugging With Loguru,	Using the @logger.catch Decorator,	Using Improved Tracebacks With Customized Error Messages,	Debugging With Contextualized Errors,Structured Logging for Modern Applications,	Formatting Logs as JSON,	Creating Custom JSON Formats,Conclusion,Next Steps,Frequently Asked Questions","by , May 07, 2025
    
    
      ","Learn how to use Loguru to implement better logging in your Python applications quickly and with less configuration. Spend more time debugging effectively with cleaner, more informative logs.","intermediate,tools",How to Use Loguru for Simpler Python Logging,https://realpython.com/python-loguru/
Leodanis Pozo Ramos,"Windows: How to Check or Get Python,	Checking the Python Version on Windows,	Knowing the Python Installation Options on Windows,Windows: How to Install Python Using the Official Installer,	Step 1: Download the Official Python Installer,	Step 2: Run the Python Installer,Windows: How to Install Python From the Microsoft Store,	Step 1: Open the Python App Page on the Microsoft Store,	Step 2: Install the Python App,macOS: How to Check or Get Python,	Checking the Python Version on a macOS,	Knowing the Python Installation Options on macOS,macOS: How to Install Python Using the Official Installer,	Step 1: Download the Python Official Installer,	Step 2: Run the Python Installer,macOS: How to Install Python From Homebrew,	Step 1: Install the Homebrew Package Manager,	Step 2: Install Python With Homebrew,Linux: How to Check or Get Python,	Checking the Python Version on Linux,	Knowing the Python Installation Options on Linux,Linux: How to Build Python From Source Code,	Step 1: Download the Python Source Code,	Step 2: Prepare Your System for Building Python,	Step 3: Build and Install Python on Your System,	Step 4: Verify Your Python Installation,iOS: How to Install Python,Android: How to Install Python on Android,Online: How to Use a Python Playground,Conclusion,Frequently Asked Questions","by , Jan 19, 2025
    
    
      ","The first step to getting started with Python is to install it on your machine. In this tutorial, you'll learn how to check which version of Python, if any, you have on your Windows, Mac, or Linux computer and the best way to install the most recent version in any environment.","basics,best-practices,tools",How to Install Python on Your System: A Guide,https://realpython.com/installing-python/
Ian Eyre,"Aggregating Data,	Learning the Basics,	Investigating Other Aggregation Techniques,	Trying Out Your Data Aggregation Skills,Grouping Aggregated Data With Polars .group_by(),	Learning the Basics,	Understanding the Power of Expressions,Grouping and Aggregating by Multiple Columns,	Performing a Data Sub-Grouping,	Tweaking Your Sorting,	Trying Out Your Data Grouping and Aggregation Skills,Grouping and Aggregating Time Series With .group_by_dynamic(),	Performing a Time-Series Grouping,	Trying Out Your Time Series Analysis Skills,Grouping and Aggregating Using Window Functions,	Working With Window Functions,	Trying Out Your Window Function Skills,Grouping and Aggregating Using Pivot Tables,	Creating a Pivot Table,	Customizing Column Order,	Digging Deeper With Your Analysis,	Trying Out Your Pivot Table Skills,Conclusion,Frequently Asked Questions","by , May 19, 2025
    
    
      ","Start using Polars .group_by() to make sense of your data. This tutorial shows you how to group, aggregate, and reveal hidden insights with hands-on examples.","intermediate,data-science,python",How to Group Data Using Polars .group_by(),https://realpython.com/polars-groupby/
Negar Vahid,"Learn Essential Technical Terms,	Waveform,	Amplitude,	Frequency,	Sampling,Get Started With TorchAudio,	Install TorchAudio,	Explore the Speech Commands Dataset,	Load the Dataset Using TorchAudio,	Load an Example Audio File,	Understand Audio Tensors (Waveforms),	Listen to Your Audio Files,Investigate Preprocessing and Data Augmentation Methods,	Resample Audio,	Apply Padding and Trimming,	Standardize the Dataset,	Normalize Audio,	Create Spectrograms,	Visualize Audio Spectrograms,	Add Additive White Gaussian Noise (AWGN),Create a Custom PyTorch Dataset,Next Steps,Conclusion,Frequently Asked Questions","by , Jun 30, 2025
    
    
      ","Learn to prepare audio data for deep learning in Python using TorchAudio. Explore how to load, process, and convert speech to spectrograms with PyTorch tools.","intermediate,machine-learning",Use TorchAudio to Prepare Audio Data for Deep Learning,https://realpython.com/python-torchaudio/
Leodanis Pozo Ramos,"Getting to Know Control Flow in Python,Using Conditional Statements,	Using if to Make Decisions,	Nesting Conditionals and Using Boolean Operators,	Chaining Multiple Conditions With elif,	Running a Default Code Block With else,	Conditional Expressions,Repeating Code With for and while Loops,	The for Loop to Traverse Iterables,	The while Loop for Conditional Iteration,	The break and continue Statements,	The else Clause in Loops,	Nested Loops,	Comprehensions,Repeating Code Through Recursion,Exploring Other Structures Related to Control Flow,	The return Statement,	The yield Statement,	The raise Statement,	The with Statement,Using try … except Blocks to Control Flow,	Handling Errors With try … except Blocks,	Running Post-Success Code With the else Clause,	Cleaning Up With the finally Clause,Matching Patterns With match … case,Common Pitfalls and Best Practices,	Unintentional Infinite Loops,	Always True or False Conditions,	Wrong Order of Conditions,	Too Broad Exceptions,	Hard-to-Read Nested Constructs,Conclusion,Frequently Asked Questions","by , May 28, 2025
    
    
      ","Take control of your code with Python control flow structures. You'll learn with real examples using loops, conditionals, try-except blocks, and pattern matching.","intermediate,python",Control Flow Structures in Python,https://realpython.com/python-control-flow/
Leodanis Pozo Ramos,"Getting Started With Python’s min() and max() Functions,	Calling min() and max() With a Single Iterable Argument,	Calling min() and max() With Multiple Arguments,Using min() and max() With Strings and Iterables of Strings,Processing Dictionaries With min() and max(),Tweaking the Standard Behavior of min() and max() With key and default,Using min() and max() With Comprehensions and Generator Expressions,Putting Python’s min() and max() Into Action,	Removing the Smallest and Largest Numbers in a List,	Building Lists of Minimum and Maximum Values,	Clipping Values to the Edges of an Interval,	Finding the Closest Points,	Identifying Cheap and Expensive Products,	Finding Coprime Integer Numbers,	Timing Different Implementations of Your Code,Exploring the Role of .__lt__() and .__gt__() in min() and max(),Emulating Python’s min() and max(),	Understanding the Code Behind min() and max(),	Planning Your Custom min() and max() Versions,	Standardizing the Input Data From *args,	Processing the default Argument,	Handling the Optional key Function,	Finding Minimum and Maximum Values,	Coding Your Custom min() and max() Functions,Conclusion,Frequently Asked Questions","by , Jan 18, 2025
    
    
      ","In this tutorial, you'll learn how to use Python's built-in min() and max() functions to find the smallest and largest values. You'll also learn how to modify their standard behavior by providing a suitable key function. Finally, you'll code a few practical examples of using min() and max().","basics,python",Python's min() and max(): Find Smallest and Largest Values,https://realpython.com/python-min-and-max/
Harrison Hoffman,"Represent Data as Vectors,	Vector Basics,	Vector Similarity,Encode Objects in Embeddings,	Word Embeddings,	Text Embeddings,Get Started With ChromaDB, an Open-Source Vector Database,	What Is a Vector Database?,	Meet ChromaDB for LLM Applications,Practical Example: Add Context for a Large Language Model (LLM),	Prepare and Inspect Your Dataset,	Create a Collection and Add Reviews,	Connect to an LLM Service,	Provide Context to the LLM,Conclusion",by ,"Vector databases are a crucial component of many NLP applications. This tutorial will give you hands-on experience with ChromaDB, an open-source vector database that's quickly gaining traction. Along the way, you'll learn what's needed to understand vector databases with practical examples.","advanced,databases,data-science,machine-learning",Embeddings and Vector Databases With ChromaDB,https://realpython.com/chromadb-vector-database/
Leodanis Pozo Ramos,"Getting to Know uv for Python,Installing uv to Manage Python Projects,	Using the Standalone Installer,	Installing From PyPI,	Upgrading to the Latest uv Version,Handling Python Projects With uv,	Creating a Python Project,	Running the Project’s Entry-Point Script,Using uv for Dependency Management,	Adding and Installing Dependencies,	Upgrading and Removing Dependencies,	Managing Development Dependencies,	Locking and Syncing the Environment,Building and Publishing Packages,	Configuring the Project,	Building a Distribution,	Publishing a Distribution,Conclusion,Frequently Asked Questions","by , Apr 28, 2025
    
    
      ","In this tutorial, you'll learn how to create and manage your Python projects using uv, an extremely fast Python package and project manager written in Rust.","intermediate,tools",Managing Python Projects With uv: An All-in-One Solution,https://realpython.com/python-uv/
Leodanis Pozo Ramos,"Getting to Know Python’s Magic or Special Methods,Controlling the Object Creation Process,	Initializing Objects With .__init__(),	Creating Objects With .__new__(),Representing Objects as Strings,	User-Friendly String Representations With .__str__(),	Developer-Friendly String Representations With .__repr__(),Supporting Operator Overloading in Custom Classes,	Arithmetic Operators,	More on Arithmetic Operators,	Comparison Operator Methods,	Membership Operators,	Bitwise Operators,	Augmented Assignments,Introspecting Your Objects,Controlling Attribute Access,	Retrieving Attributes,	Setting Attributes,	Deleting Attributes,Managing Attributes Through Descriptors,Supporting Iteration With Iterators and Iterables,	Creating Iterators,	Building Iterables,Making Your Objects Callable,Implementing Custom Sequences and Mappings,Handling Setup and Teardown With Context Managers,Conclusion",by ,"In this tutorial, you'll learn what magic methods are in Python, how they work, and how to use them in your custom classes to support powerful features in your object-oriented code.","advanced,python",Python's Magic Methods: Leverage Their Power in Your Classes,https://realpython.com/python-magic-methods/
Leodanis Pozo Ramos,"Getting to Know Namespaces in Python,	The Built-in Namespace,	The Global Namespace,	The Local Namespace,	The Enclosing or Nonlocal Namespace,Understanding the Scope of Names,	The LEGB Rule for Searching Names,	The LEGB Rule in Action,Shadowing Built-in Names in Python,Managing Namespace Dictionaries,	The globals() Function,	The locals() Function,	The Difference Between globals() and locals(),Modifying Variables From a Different Namespace,	The global Statement,	The nonlocal Statement,Conclusion,Frequently Asked Questions","by , Apr 14, 2025
    
    
      ","In this tutorial, you'll learn about Python namespaces, the structures that store and organize the symbolic names during the execution of a Python program. You'll learn when namespaces are created, how they're implemented, and how they support variable scope.","intermediate,python",Namespaces in Python,https://realpython.com/python-namespace/
Martin Breuss,"Understand the Project and Approach,	The Selenium Project,	Your Bandcamp Discover Music Player,	The POM Design Pattern,	This Tutorial,Set Up Your Environment,	Install Selenium,	Set Up GeckoDriver for Firefox,	Verify Your Setup,Navigate a Web Page With Python and Selenium,	Understand the DOM Structure of Bandcamp,	Launch a Headless Browser and Navigate to a URL,	Locate Elements in the DOM,Interact With Web Elements,	Click Buttons and Links,	Send Keystrokes and Text Entry,	Deal With Hidden or Overlaid Elements,	Use Hover, Drag-and-Drop, and More Complex Gestures,	Submit Forms,Handle Dynamic Content,	Understand Implicit, Explicit, and Fluent Waits,	Set Up an Implicit Wait,	Use Explicit Waits for Targeted Waiting,	Choose From Common Expected Conditions,	Handle Synchronization Issues,Implement the Page Object Model (POM),	Understand the POM Design Pattern,	Establish a Base for Pages and Elements,	Describe Your Web Page as a Page Object,	Define Reusable Web Elements,	Keep Locators Separate,	Enjoy the Benefits of the POM in Practice,Build the Music Player App,	Create Your Music Player Class,	Assemble a Text-Based User Interface,	Make Your App Executable,Next Steps,Conclusion,Frequently Asked Questions","by , Apr 30, 2025
    
    
      ","Learn advanced Python web automation techniques with Selenium, such as headless browsing, interacting with web elements, and implementing the Page Object Model pattern.","intermediate,projects,testing,web-scraping",Modern Web Automation With Python and Selenium,https://realpython.com/modern-web-automation-with-python-and-selenium/
Leodanis Pozo Ramos,"Exploring String Templates Before Python 3.14,	The String Formatting Operator (%),	The str.format() Method,	F-String Literals,	The string.Template Class,	The Built-in format() Function,	The string.Formatter.parse() Method,Getting to Know Python T-Strings,Comparing T-Strings and F-Strings,Exploring the Template Class,Understanding the Interpolation Class,	The .expression Attribute,	The .value Attribute,	The .conversion Attribute,	The .format_spec Attribute,Processing T-Strings,	Template Items,	Interpolation Values,Understanding Other T-String Features,	Concatenation,	Self-Documented T-Strings,	Raw T-Strings,	Nested T-Strings,Exploring Techniques for Using T-Strings,	Lazy Evaluation and Template Reuse,	Template to String Conversion,	Asynchronous Evaluation,Writing T-String Handlers,	Sanitizing SQL Queries,	Escaping HTML,	Structured Logging,Conclusion,Frequently Asked Questions","by , Jul 02, 2025
    
    
      ","Python 3.14 introduces t-strings: a safer, more flexible alternative to f-strings. Learn how to process templates securely and customize string workflows.","intermediate,python",Python 3.14 Preview: Template Strings (T-Strings),https://realpython.com/python-t-strings/
Leodanis Pozo Ramos,"Getting to Know namedtuple in Python,Creating Tuple-Like Classes With the namedtuple() Function,	Supplying Required Arguments,	Using Optional Arguments,Exploring Additional Features of namedtuple Classes,	Creating Named Tuples From Iterables With ._make(),	Converting Named Tuples Into Dictionaries With ._asdict(),	Replacing Named Tuple Fields With ._replace(),	Exploring Named Tuple Attributes: ._fields and ._field_defaults,Writing Pythonic Code With namedtuple,	Using Field Names Instead of Indices,	Returning Multiple Values From Functions,	Reducing the Number of Arguments in Functions,	Reading Tabular Data From Files and Databases,Comparing namedtuple With Other Data Structures,	namedtuple vs Dictionaries,	namedtuple vs Data Classes,	namedtuple vs typing.NamedTuple,	namedtuple vs tuple,Subclassing namedtuple Classes,Conclusion,Frequently Asked Questions","by , Jun 16, 2025
    
    
      ","Discover how Python's namedtuple lets you create simple, readable data structures with named fields you can access using dot notation.","intermediate,data-structures,python",Write Pythonic and Clean Code With namedtuple,https://realpython.com/python-namedtuple/
Leodanis Pozo Ramos,"Getting to Know Backus-Naur Form Notation (BNF),	BNF Rules and Their Components,	A Generic Example: Grammar for a Full Name,	A Programming-Related Example: Identifiers,Understanding Python’s BNF Variation,Reading BNF Rules From Python’s Documentation: Examples,	The pass and return Statements,	Assignment Expressions,	Conditional Statements,	Loop Constructs,Exploring Best Practices for Reading Python’s BNF,Conclusion",by ,"In this tutorial, you'll learn about Backus–Naur form notation (BNF), which is typically used for defining the grammar of programming languages. Python uses a variation of BNF, and here, you'll learn how to read it to get a better understanding of some language constructs.","advanced,python",BNF Notation: Dive Deeper Into Python's Grammar,https://realpython.com/python-bnf-notation/
Philipp Acsany,"Demo: A Django Blog Admin, a GraphQL API, and a Vue Front End,Project Overview,Prerequisites,Step 1: Set Up the Django Blog,	Install Django,	Create the Django Project,	Run Django Migrations,	Create a Superuser,	Step 1 Summary,Step 2: Create the Django Blog Admin,	Create the Django Blog Application,	Enable the Django Blog Application,	Create the Django Blog Data Models,	Create the Model Admin Configuration,	Create the Model Migrations,	Start Blogging,	Step 2 Summary,Step 3: Set Up Graphene-Django,	Install Graphene-Django,	Configure Graphene-Django,	Step 3 Summary,Step 4: Set Up django-cors-headers,	Install django-cors-headers,	Configure django-cors-headers,	Step 4 Summary,Step 5: Set Up Vue.js,	Install Node.js,	Create the Vue Project,	Step 5 Summary,Step 6: Create Basic Views and Components,	Remove Existing Views,	Add Your Views,	Remove Existing Components,	Create Your Components,	Set Up Routes,	Step 6 Summary,Step 7: Update the Vue Components,	Link to the Author,	Prep the Blog Posts List,	Render All Blog Posts,	Show Posts for a Given Tag,	Show Information About an Author,	Display a Single Blog Post,	Adjust the Routes for the App,	Step 7 Summary,Step 8: Implement Vue Apollo,	Install Vue Apollo,	Configure Vue Apollo,	Step 8 Summary,Step 9: Fetch the Data,	AllPostsView Query,	PostView Query,	AuthorView Query,	PostsByTagView Query,	Step 9 Summary,Next Steps,Conclusion",by ,"In this step-by-step project, you'll build a blog from the ground up. You'll turn your Django blog data models into a GraphQL API and consume it in a Vue application for users to read. You'll end up with an admin site and a user-facing site you can continue to refine for your own use.","advanced,api,django,front-end,web-dev","Build a Blog Using Django, GraphQL, and Vue",https://realpython.com/python-django-blog/
Geir Arne Hjelle,"Recap Type Variable Syntax Before Python 3.12,Explore Python 3.12’s New Syntax for Typing Generics,	Generic Classes and Functions,	Constrained and Bounded Type Variables,	Type Aliases,Model Inheritance With @override,	Inheritance in Python,	Safe Refactoring With @override,Annotate **kwargs More Precisely,Conclusion",by ,"In this tutorial, you'll preview the new static typing features in Python 3.12. You'll learn about the new syntax for type variables, making generics simpler to define. You'll also see how @override lets you model inheritance and how you use typed dictionaries to annotate variable keyword arguments.","advanced,python",Python 3.12 Preview: Static Typing Improvements,https://realpython.com/python312-typing/
Jim Anderson,"What Are Python Subinterpreters?,What’s Changing in Python 3.12 (PEP 684)?,	Changes to the Global State and the GIL,	Changes to Extension Modules,	Why This Matters,What’s Changing in Python 3.13 (PEP 554)?,	The Interpreter Object,	The Management API,	A Threading Example,	An Interpreter Persistence Example,	A Data Exchange Example,Should You Care About Subinterpreters in Python 3.12?,FAQs",by ,"In this tutorial, you'll preview one of the upcoming features of Python 3.12 and a proposed change to Python 3.13, addressing how subinterpreters work in the CPython program. The changes are described in PEP 684 and PEP 554.","advanced,python",Python 3.12 Preview: Subinterpreters,https://realpython.com/python312-subinterpreters/
Bartosz Zaczyński,"Free Threading and JIT in Python 3.13: What’s the Fuss?,	Free Threading Makes the GIL Optional,	JIT Compiles Python to Machine Code,Get Your Hands on the New Features,	The Official Distribution Channels,	Python Version Manager: pyenv,	Custom Build From Source Code,Compile and Run Python 3.13 Using Docker,	Install the Necessary Build Tools and Libraries,	Download Python Source Code Into the Container,	Build Python With Free Threading and JIT Support,	Build Stock Python Without Experimental Features,	Take a Snapshot of Your Docker Container,	Run Python 3.13 From Your Host Machine,Check the Availability of Experimental Features at Runtime,	Take Control of the Global Interpreter Lock,	Toggle the Just-in-Time Compiler at Runtime,	Break Down Python Bytecode Into Micro-Ops,Measure the Performance Improvements of Python 3.13,	Free Threading: Recursive Fibonacci,	JIT Compiler: Iterative Fibonacci,Make a C Extension Module for Python 3.13 and Later,	Implement a Bare-Bones Extension Module,	Compile the Module Into a Shared Object,	Import the Compiled Module Into Python 3.13,	Mark the Extension Module as Thread-Safe,Conclusion","by , Sep 18, 2024
    
    
      ","Get a sneak peek at the upcoming features in Python 3.13 aimed at enhancing performance. In this tutorial, you'll make a custom Python build with Docker to enable free threading and an experimental JIT compiler. Along the way, you'll learn how these features affect the language's ecosystem.","advanced,python",Python 3.13 Preview: Free Threading and a JIT Compiler,https://realpython.com/python313-free-threading-jit/
Ray Johns,"What Is TensorFlow?,	Who Uses TensorFlow?,	Code Style and Function,	The Advantage of Using Keras,	TensorFlow Special Features,	TensorFlow Ecosystem,What Is PyTorch?,	Who Uses PyTorch?,	Code Style and Function,	PyTorch Special Features,	PyTorch Ecosystem,PyTorch vs TensorFlow Decision Guide,	Style,	Model,	Data Type,	Audio,	Text,	Images,	Project Goal,Conclusion,Further Reading",by ,PyTorch vs Tensorflow: Which one should you use? Learn about these two popular deep learning libraries and how to choose the best one for your project.,"advanced,data-science,machine-learning",PyTorch vs TensorFlow for Your Python Deep Learning Project,https://realpython.com/pytorch-vs-tensorflow/
Leodanis Pozo Ramos,"Getting to Know Async Iterators and Iterables in Python,	Async Iterators,	Async Iterables,	Async Iteration,Creating Async Generator Functions,Creating Class-Based Async Iterators and Iterables,	The .__aiter__() Method,	The .__anext__() Method,Using Async Iterators With Other Tools,	The Built-in anext() Function,	Asynchronous Comprehensions and Generator Expressions,Async Iterators in Concurrent Code,Conclusion","by , Aug 07, 2024
    
    
      ","In this tutorial, you'll learn how to create and use asynchronous iterators and iterables in Python. You'll explore their syntax and structure and discover how they can be leveraged to handle asynchronous operations more efficiently.","advanced,python",Asynchronous Iterators and Iterables in Python,https://realpython.com/python-async-iterators/
Ricky White,"Unlocking the Benefits of CI/CD,Exploring GitHub Workflows,	Anatomy of a Workflow File,	Workflow Triggers,	Workflow Jobs,	Workflow Steps,Using GitHub Actions for Python,	Exploring the GitHub Marketplace,	Including Actions in Workflows,Creating Your First Workflow,Creating an Automated Testing Workflow,	Testing on Multiple Versions of Python,	Finalizing the Testing Workflow,Publishing Your Package Automatically to PyPI,	Setting Up and Building the Package,	Keeping Your Secrets Secure,	Deploying Your Package,	Accessing GitHub Environment Variables,Automating Security and Dependancy Updates,Next Steps,Conclusion","by , Nov 27, 2024
    
    
      ","With most software following agile methodologies, it's essential to have robust DevOps systems in place to manage, maintain, and automate common tasks with a continually changing codebase. By using GitHub Actions, you can automate your workflows efficiently, especially for Python projects.","advanced,devops",Continuous Integration and Deployment for Python With GitHub Actions,https://realpython.com/github-actions-python/
Nathan Jennings,"Historical Background,Python Socket API Overview,TCP Sockets,Echo Client and Server,	Echo Server,	Echo Client,	Running the Echo Client and Server,	Viewing Socket State,Communication Breakdown,Handling Multiple Connections,Multi-Connection Client and Server,	Multi-Connection Server,	Multi-Connection Client,	Running the Multi-Connection Client and Server,Application Client and Server,	Application Protocol Header,	Sending an Application Message,	Application Message Class,	Running the Application Client and Server,Troubleshooting,	The ping Command,	The netstat Command,	Tools for Windows,	Wireshark Network Analyzer,Quick Reference,	Python Documentation,	Socket Errors,	Socket Address Families,	Using Hostnames,	Blocking Calls,	Closing Connections,	Byte Endianness,Conclusion,Frequently Asked Questions","by , Dec 07, 2024
    
    
      ","In this in-depth tutorial, you'll learn how to build a socket server and client with Python. By the end of this tutorial, you'll understand how to use the main functions and methods in Python's socket module to write your own networked client-server applications.","advanced,python,web-dev",Socket Programming in Python (Guide),https://realpython.com/python-sockets/
Martin Breuss,"Python Celery Basics,	Why Use Celery?,	How Can You Leverage Celery for Your Django App?,Integrate Celery With Django,	Set Up the Feedback App,	Install Celery as Your Task Queue,	Install Redis as Your Celery Broker and Database Back End,	Add Celery to Your Django Project,Handle Workloads Asynchronously With Celery,	Revisit the Synchronous Code,	Refactor the Code as a Celery Task,	Test Your Asynchronous Task,Conclusion,Frequently Asked Questions","by , Dec 08, 2024
    
    
      ","In this tutorial, you'll learn how to integrate Celery and Django using Redis as a message broker. You'll refactor the synchronous email sending functionality of an existing Django app into an asynchronous task that you'll run with Celery instead.","advanced,databases,django,web-dev",Asynchronous Tasks With Django and Celery,https://realpython.com/asynchronous-tasks-with-django-and-celery/
Christopher Trudeau,"Prerequisites,Starting a Sample Django App in a Project,	Creating the Django Project From Scratch,	Exploring the Receipts Sample App,	Testing the App in the Project,Making Your Installable Django App,	Moving Your Django App Out of the Project,	Bootstrapping Django Outside of a Project,	Running Management Commands With Your Installable Django App,	Testing Your Installable Django App,	Defining Your Installable Package With pyproject.toml,	Testing Multiple Versions With nox,Publishing to PyPI,Conclusion,Further Reading","by , Jul 31, 2024
    
    
      ","In this step-by-step tutorial, you'll learn how to create an installable Django app. You'll cover everything you need to know, from extracting your app from a Django project to turning it into a package that's available on PyPI and installable through pip.","advanced,django,projects,testing,web-dev",How to Write an Installable Django App,https://realpython.com/installable-django-app/
Leodanis Pozo Ramos,"Demo,Project Overview,Prerequisites,Step 1: Code the TUI of Your Python Dice-Rolling App,	Take the User’s Input at the Command Line,	Parse and Validate the User’s Input,	Try Out the Dice-Rolling App’s TUI,Step 2: Simulate the Rolling of Six-Sided Dice in Python,Step 3: Generate and Display the ASCII Diagram of Dice Faces,	Set Up the Diagram of Dice Faces,	Generate the Diagram of Dice Faces,	Finish Up the App’s Main Code and Roll the Dice,Step 4: Refactor the Code That Generates the Diagram of Dice Faces,Conclusion,Frequently Asked Questions,Next Steps","by , Feb 02, 2025
    
    
      ","In this step-by-step project, you'll build a dice-rolling simulator app with a minimal text-based user interface using Python. The app will simulate the rolling of up to six dice. Each individual die will have six sides.","basics,projects",Build a Dice-Rolling Application With Python,https://realpython.com/python-dice-roll/
Leodanis Pozo Ramos,"Getting to Know String Interpolation and Formatting in Python,Using F-Strings for String Interpolation,	Creating F-String Literals,	Interpolating Variables Into F-Strings,	Embedding Expressions in F-Strings,Using the .format() Method for String Interpolation,	Positional Arguments With Manual Field Specification,	Positional Arguments With Automatic Field Numbering,	Keyword Arguments and Named Fields,Doing Formatted Interpolation: Components of a Replacement Field,	The conversion Component,	The format_spec Component,Format Specifiers and Their Components,	The type Component,	The width Component,	The align and fill Components,	The sign Component,	The # Component,	The 0 Component,	The grouping_option Component,	The precision Component,Creating Format Specifiers Dynamically,Conclusion,Frequently Asked Questions","by , Feb 01, 2025
    
    
      ","In this tutorial, you'll explore Python's modern string formatting tools. You'll learn how to harness the power of Python's f-strings and the .format() method for string interpolation and formatting.","basics,python",A Guide to Modern Python String Formatting Tools,https://realpython.com/python-formatted-output/
Ian Currie,"How to Remove or Replace a Python String or Substring,Set Up Multiple Replacement Rules,Leverage re.sub() to Make Complex Rules,Use a Callback With re.sub() for Even More Control,Apply the Callback to the Script,Conclusion,Frequently Asked Questions","by , Jan 15, 2025
    
    
      ","In this tutorial, you'll learn how to remove or replace a string or substring. You'll go from the basic string method .replace() all the way up to a multi-layer regex pattern using the sub() function from Python's re module.","basics,best-practices",How to Replace a String in Python,https://realpython.com/replace-string-python/
Leodanis Pozo Ramos,"Getting to Know the .__dict__ Attribute in Python,	The .__dict__ Class Attribute,	The .__dict__ Instance Attribute,	The .__dict__ Attribute in Functions,	The .__dict__ Attribute in Other Objects,Inspecting .__dict__ With the Built-in vars() Function,Manipulating Attributes With .__dict__,	Accessing Existing Attributes,	Modifying Existing Attributes,	Adding New Attributes Dynamically,	Deleting Attributes,Comparing .__dict__ With Other Attribute Manipulation Tools,Exploring .__dict__ in Inheritance,	Class .__dict__ in Inheritance,	Instance .__dict__ in Inheritance,Using .__dict__ in Practice,	Memoizing Data in Functions,	Introspecting and Debugging Code,	Serializing Data to JSON Format,	Customizing Access, Mutation, and Deletion,	Writing Robust Descriptors,Conclusion,Frequently Asked Questions","by , Apr 09, 2025
    
    
      ","In this tutorial, you'll dive deeper into the .__dict__ attribute in Python objects. This attribute is a dictionary-like object that holds writable class or instance attributes. It allows you to manage attributes at a low level, making your classes flexible and efficient.","advanced,python",Using Python's .__dict__ to Work With Attributes,https://realpython.com/python-dict-attribute/
Martin Breuss,"How to Split a String in Python Using .split(),Split With Different Delimiters Using sep,Limit the Amount of Splits With maxsplit,Go Backwards Through Your String Using .rsplit(),Split Strings by Lines With .splitlines(),Use re.split() for Advanced String Splitting,Conclusion,Frequently Asked Questions","by , Feb 05, 2025
    
    
      ","This tutorial will help you master Python string splitting. You'll learn to use .split(), .splitlines(), and re.split() to effectively handle whitespace, custom delimiters, and multiline text, which will level up your data parsing skills.","basics,python",How to Split a String in Python,https://realpython.com/python-split-string/
Jim Anderson,"Exploring Concurrency in Python,	What Is Concurrency?,	What Is Parallelism?,	When Is Concurrency Useful?,Speeding Up an I/O-Bound Program,	Synchronous Version,	Multi-Threaded Version,	Asynchronous Version,	Process-Based Version,Speeding Up a CPU-Bound Program,	Synchronous Version,	Multi-Threaded Version,	Asynchronous Version,	Process-Based Version,Deciding When to Use Concurrency,Conclusion","by , Nov 25, 2024
    
    
      ","In this tutorial, you'll explore concurrency in Python, including multi-threaded and asynchronous solutions for I/O-bound tasks, and multiprocessing for CPU-bound tasks. By the end of this tutorial, you'll know how to choose the appropriate concurrency model for your program's needs.","advanced,best-practices",Speed Up Your Python Program With Concurrency,https://realpython.com/python-concurrency/
Jon Fincher,"Python Game Engines Overview,Pygame,	Pygame Installation,	Basic Concepts,	Basic Application,	Advanced Application,Pygame Zero,	Pygame Zero Installation,	Basic Concepts,	Sprites and Images,	Advanced Application,Arcade,	Arcade Installation,	Basic Concepts,	Advanced Application,adventurelib,	adventurelib Installation,	Basic Concepts,	Advanced Application,Ren’Py,	Ren’Py Installation,	Basic Concepts,	Advanced Application,Other Notable Python Game Engines,Sources for Game Assets,Conclusion,Frequently Asked Questions","by , Feb 02, 2025
    
    
      ","In this tutorial, you'll explore several Python game engines available to you. For each, you'll code simple examples and a more advanced game to learn the game engine's strengths and weaknesses.","basics,gamedev",Top Python Game Engines,https://realpython.com/top-python-game-engines/
Atharva Shah,"How to Use Python’s .strip() Method to Remove Whitespace From Strings,Remove Specific Characters With .strip(),Compare .strip() With Other Python Strip Methods,	Use .lstrip() and .rstrip() for One-Sided Removal of Character Sets,	Remove a Prefix With .removeprefix(),	Remove a Suffix With .removesuffix(),	Choose the Right Method for Character Removal,Avoid Common Pitfalls and Edge Cases,	Assuming .strip() Removes All Whitespace From a String,	Assuming .strip() Removes Specific Character Sequences,	Handling Uncommon Whitespace Characters,Apply .strip() to Real-World Use Cases,	Combine .strip() With Other String Methods,	Clean Data With .strip(),	Use .strip() in Conditional Pipelines,Conclusion,Frequently Asked Questions","by , Apr 02, 2025
    
    
      ","Use Python's .strip() method to remove unwanted whitespace or specific characters. Learn about common pitfalls, real-world use cases, and compare .strip() with similar methods like .lstrip() and .removesuffix().","basics,python",How to Strip Characters From a Python String,https://realpython.com/python-strip/
David Fundakowski,"Ordering Values With sorted(),	Sorting Numbers,	Sorting Strings,Exploring Limitations and Gotchas With Python Sorting,	Handling Lists With Non-Comparable Data Types,	Considering Length When Sorting Similar Strings,Customizing sorted() With Keyword Arguments,	Sorting Iterables in Reverse Order,	Sorting Strings by Length,	Ignoring the Case When Sorting Strings,	Avoiding Pitfalls When Using sorted() With a key Argument,	Combining sorted() With lambda Functions,Ordering Values With .sort(),	Understanding the Differences Between .sort() and sorted(),	Using Keywords Arguments With .sort() and sorted(),Deciding When to Use sorted() vs .sort(),Conclusion,Frequently Asked Questions","by , Feb 24, 2025
    
    
      ","In this tutorial, you'll learn how to sort various types of data in different data structures in Python. You'll explore custom sorting orders and work with two distinct ways of sorting.","basics,python",How to Use sorted() and .sort() in Python,https://realpython.com/python-sort/
Bartosz Zaczyński,"Getting the Big Picture of Object Copying,	Scalar vs Composite Types,	Mutable vs Immutable Objects,	Value vs Reference Copying,	Python’s Reference Binding,	More on Assignments,Understanding Shallow and Deep Copying,	Shallow Copy: Duplicating Object References,	Exposing the Pitfalls of Shallow Copying,	Deep Copy: Creating Independent Clones,	Comparing Shallow and Deep Copying,Exploring the Techniques of Copying in Python,	Calling the Class Constructor,	Slicing a Python Sequence,	Calling the .copy() Method,	Using copy() and deepcopy(),Customizing the Copy Behavior of Python Objects,	Relying on the Default Behavior,	Managing Resources in Copies,	Copying Attributes Selectively,	Supporting Attribute Replacement,Conclusion,Frequently Asked Questions","by , Apr 21, 2025
    
    
      ",Understand the difference between shallow and deep copies in Python. Learn how to duplicate objects safely using the copy module and other techniques.,"advanced,python",How to Copy Objects in Python: Shallow vs Deep Copy Explained,https://realpython.com/python-copy/
Leodanis Pozo Ramos,"Getting Started With Python while Loops,Using Advanced while Loop Syntax,	The break Statement: Exiting a Loop Early,	The continue Statement: Skipping Tasks in an Iteration,	The else Clause: Running Tasks at Natural Loop Termination,Writing Effective while Loops in Python,	Running Tasks Based on a Condition With while Loops,	Using while Loops for an Unknown Number of Iterations,	Removing Items From an Iterable in a Loop,	Getting User Input With a while Loop,	Traversing Iterators With while Loops,	Emulating Do-While Loops,Using while Loops for Event Loops,Exploring Infinite while Loops,	Unintentional Infinite Loops,	Intentional Infinite Loops,Conclusion,Frequently Asked Questions","by , Mar 03, 2025
    
    
      ","In this tutorial, you'll learn about indefinite iteration using the Python while loop. You'll be able to construct basic and complex while loops, interrupt loop execution with break and continue, use the else clause with a while loop, and deal with infinite loops.","basics,python",Python while Loops: Repeating Tasks Conditionally,https://realpython.com/python-while-loop/
Martin Breuss,"How to Join Strings in Python Using .join(),	Join With an Empty String,	Combine Strings of Characters,Join Elements of an Iterable With Specific Separators,	Create Comma-Delimited Output,	Collapse a List of URL Parts,	Use Multicharacter Separators,Detangle Surprising Errors When Using .join(),	Non-String Values in the Iterable,	Non-Iterable Types,	.join() Called on the Wrong Object,Consider the + Operator or F-Strings for Simple Scenarios,Create an Event Log String: Practical Example,Understand How str.join() Optimizes String Concatenation,	Pre-Pass: Check Types and Calculate Needed Space,	Second Pass: Copy Once and Insert Separators,	Compare .join() to Using += in a Loop,Conclusion,Frequently Asked Questions","by , Feb 10, 2025
    
    
      ","In this tutorial, you'll learn how to use Python's built-in .join() method to combine string elements from an iterable into a single string with a specified separator. You'll also learn about common pitfalls, and how CPython makes .join() work efficiently.","basics,python",How to Join Strings in Python,https://realpython.com/python-join-string/
Chad Hansen,"Python Keywords,Python Soft Keywords,Value Keywords: True, False, None,	The True and False Keywords,	The None Keyword,Operator Keywords: and, or, not, in, is,	The and Keyword,	The or Keyword,	The not Keyword,	The in Keyword,	The is Keyword,Control Flow Keywords: if, elif, else,	The if Keyword,	The elif Keyword,	The else Keyword,Iteration Keywords: for, while, break, continue, else,	The for Keyword,	The while Keyword,	The break Keyword,	The continue Keyword,	The else Keyword Used With Loops,Structure Keywords: def, class, with, as, pass, lambda,	The def Keyword,	The class Keyword,	The with Keyword,	The as Keyword Used With with,	The pass Keyword,	The lambda Keyword,Returning Keywords: return, yield,	The return Keyword,	The yield Keyword,Import Keywords: import, from, as,	The import Keyword,	The from Keyword,	The as Keyword,Exception-Handling Keywords: try, except, raise, finally, else, assert,	The try Keyword,	The except Keyword,	The raise Keyword,	The finally Keyword,	The else Keyword Used With try and except,	The assert Keyword,Asynchronous Programming Keywords: async, await,	The async Keyword,	The await Keyword,Variable Handling Keywords: del, global, nonlocal,	The del Keyword,	The global Keyword,	The nonlocal Keyword,Soft Keywords and Their Usage,	The match, case, and _ Soft Keywords,	The type Soft Keyword,How to Identify Python Keywords,	Leverage the Syntax Highlighting of Your IDE,	Use Code in a REPL to Check Keywords,	Look for a SyntaxError,Deprecated Python Keywords,	The Former print Keyword,	The Former exec Keyword,Conclusion,Frequently Asked Questions","by , Feb 12, 2025
    
    
      ","Python keywords are the fundamental building blocks of any Python program. In this tutorial, you'll learn the basic syntax and usage of each of Python's thirty-five keywords and four soft keywords so you can write more efficient and readable code.","basics,python",Python Keywords: An Introduction,https://realpython.com/python-keywords/
